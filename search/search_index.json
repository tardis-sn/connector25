{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TARDIS Connector","text":"<p>The TARDIS Connector is an end-to-end pipeline for simulating stripped envelope core-collapse supernovae and calculating spectra and light curves.</p> <pre><code>flowchart TD\n    MESA(MESA)\n    MESA2(MESA)\n    STIR(STIR)\n    SKYNET(SKYNET)\n    STELLA(STELLA)\n    SNEC(SNEC)\n    TARDIS(TARDIS)\n    EMPTY[ ]:::empty\n\n    Progenitor --&gt; MESA\n    MESA -- Evolution Single/Binary --&gt; Explosion\n    Explosion --&gt; STIR\n    STIR -- Shock Initialization Energetics --&gt; Fusion\n    Fusion --&gt; SKYNET\n    SKYNET -- Core Burning Abundances --&gt; Hydro\n    Hydro --&gt; MESA2\n    MESA2 -- Shock Propagation Ejecta --&gt; Rad-Hydro\n    Rad-Hydro --&gt; STELLA\n    Rad-Hydro --&gt; SNEC\n    STELLA --&gt; EMPTY\n    SNEC --&gt; EMPTY\n    EMPTY -- Transport Luminosity --&gt; Spectral-synthesis\n    Spectral-synthesis --&gt; TARDIS\n\n    style Progenitor fill:#f9f,stroke:#333,stroke-width:4px\n    style Explosion fill:#f9f,stroke:#333,stroke-width:4px\n    style Fusion fill:#f9f,stroke:#333,stroke-width:4px\n    style Hydro fill:#f9f,stroke:#333,stroke-width:4px\n    style Rad-Hydro fill:#f9f,stroke:#333,stroke-width:4px\n    style Spectral-synthesis fill:#f9f,stroke:#333,stroke-width:4px\n    style MESA fill:#3a56fd,color:#fff\n    style MESA2 fill:#3a56fd,color:#fff\n    style STIR fill:#4586b0,color:#fff\n    style SKYNET fill:#252920,color:#fff\n    style STELLA fill:#00b948,color:#fff\n    style SNEC fill:#db6e0d,color:#fff\n    style TARDIS fill:#000,color:#fff\n    classDef empty width:1px,height:1px;\n</code></pre>"},{"location":"about/","title":"About","text":""},{"location":"about/#the-tardis-connector-team","title":"The TARDIS Connector Team","text":"<ul> <li>Andrea Antoni</li> <li>Brandon Barker</li> <li>Matteo Cantiello</li> <li>Sean Couch</li> <li>John Delker</li> <li>Anirban Dutta</li> <li>EB Farag</li> <li>Andrew Fullard</li> <li>Jared Goldberg</li> <li>Aldana Grichener</li> <li>Yan-Fei Jiang</li> <li>Wolfgang Kerzendorf</li> <li>Philip Mocz</li> <li>Jing Lu</li> <li>Evan O\u2019Connor</li> <li>Mathieu Renzo</li> <li>Josh Shields</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#configuration-files","title":"Configuration files","text":"<p>Clone the repository https://github.com/tardis-sn/connector25 to your preferred  location.</p>"},{"location":"installation/#data-files","title":"Data files","text":"<p>Download from our Zenodo repository at XXXXXXXXXXXXXXXXXX</p>"},{"location":"installation/#mesa","title":"MESA","text":"<p>MESA is a versatile open-source 1D stellar evolution code. For the Connector 25 project, we install MESA version 24.08.1 and MESA SDK version 24.7.1/24.10.1/25.3.1 (Linux (Intel/AMD) / Mac OS (Intel) / Mac OS (ARM)) for bit-for-bit reproducibility.</p>"},{"location":"installation/#mesa-container","title":"MESA container","text":"<p>MESA is also provided through a pre-built container. It can be obtained from DockerHub using the command: <code>docker pull CONNECTORUSERNAME/mesa-connector:XXXXXX</code></p>"},{"location":"installation/#run-with-docker","title":"Run with Docker","text":"<p>To run the built container with Docker to check it has built correctly,  run <code>sudo docker run -it mesa-latest</code>. This will drop you into a bash prompt.  MESA is located in <code>/mesa-24.08.1</code> and the SDK in <code>/opt/mesadsk</code>. Run <code>exit</code> to end the container. </p> <p>To use the container to run the MESA step of the Connector with Docker, you will need to bind your copy of the Connector repository to the container. Run the command <code>sudo docker run -v /path/to/connector25:/connector25-it  mesa-latest</code>.  Now the path <code>/connector25</code> within the container prompt will have access to your  local copy of the Connector repository.</p>"},{"location":"installation/#run-with-singularityapptainer","title":"Run with Singularity/Apptainer","text":"<p>To run the built container on an HPCC you will likely need to use  (Singularity)[https://docs.sylabs.io/guides/3.5/user-guide/introduction.html] or (Apptainer)[https://apptainer.org/docs/user/latest/] (these are basically  the same thing as of March 2025). </p> <p>Pull the container from DockerHub using the command  <code>singularity pull singularity pull docker://CONNECTORUSERNAME/mesa-connector:24.08.1</code>. Run the container using <code>singularity run mesa-connector_24.08.1.sif</code>. Singularity automatically mounts your home directory, so you can navigate to your clone of  the Connector repository within the container prompt.</p>"},{"location":"installation/#build","title":"Build","text":"<p>This is not needed for users of the pipeline. We also provide a Docker definitions file to allow the production of a  containerized version of MESA using the versions described above.  To build the container, install Docker. Then download the zip for MESA version 24.08.1  and run the command <code>sudo docker build -f /path/to/mesa.dockerfile -t mesa-latest .</code>  in the same directory as <code>mesa-24.08.1.zip</code>.</p>"},{"location":"installation/#stella-container","title":"STELLA container","text":""},{"location":"installation/#run-with-docker_1","title":"Run with Docker","text":"<p>STELLA is part of the MESA container. </p>"},{"location":"installation/#snec-container","title":"SNEC container","text":""},{"location":"installation/#build_1","title":"Build","text":"<p>We provide a Docker definitions file to allow the production of a  containerized version of SNEC  using version 1.01. To build the container, install Docker  and run the command <code>sudo docker build -f /path/to/snec.dockerfile -t snec .</code>.</p>"},{"location":"installation/#run-with-docker_2","title":"Run with Docker","text":"<p>To run the built container with Docker to check it has built correctly,  run <code>sudo docker run -it snec</code>. This will drop you into a bash prompt in the SNEC directory. Run <code>exit</code> to end the container.</p> <p>To use the container to run the SNEC step of the Connector with Docker, you will need to bind your copy of the Connector repository to the container. Run the command <code>sudo docker run -v /path/to/connector25:/connector25-it snec</code>.</p>"},{"location":"installation/#run-with-singularityapptainer_1","title":"Run with Singularity/Apptainer","text":"<p>To run the built container on an HPCC you will likely need to use  (Singularity)[https://docs.sylabs.io/guides/3.5/user-guide/introduction.html] or (Apptainer)[https://apptainer.org/docs/user/latest/] (these are basically the  same thing as of March 2025). </p> <p>Pull the container from DockerHub using the command  <code>singularity pull docker://CONNECTORUSERNAME/snec:XXXXXX</code>. Run the container using <code>singularity run snec-XXXXXX</code>. Singularity automatically mounts your home directory, so you can navigate to your clone of  the Connector repository within the container prompt.</p>"},{"location":"installation/#stir","title":"STIR","text":"<p>STIR is only provided using our pre-built container.</p>"},{"location":"installation/#run-with-docker_3","title":"Run with Docker","text":"<p>Pull the container from DockerHub using the command  <code>docker pull CONNECTORUSERNAME/stir-connector:XXXXXXX</code>.</p> <p>To use the container to run the STIR step of the Connector with Docker, you will need to bind your copy of the Connector repository to the container. Run the command <code>sudo docker run -v /path/to/connector25:/connector25-it  stir-latest</code>.  Now the path <code>/connector25</code> within the container prompt will have access to your  local copy of the Connector repository.</p>"},{"location":"installation/#run-with-singularityapptainer_2","title":"Run with Singularity/Apptainer","text":"<p>To run the built container on an HPCC you will likely need to use  (Singularity)[https://docs.sylabs.io/guides/3.5/user-guide/introduction.html] or (Apptainer)[https://apptainer.org/docs/user/latest/] (these are basically the  same thing as of March 2025). </p> <p>Pull the container from DockerHub using the command  <code>singularity pull docker://CONNECTORUSERNAME/stir-connector:XXXXXX</code>. Run the container using <code>singularity run stir-connector-XXXXXX</code>. Singularity automatically mounts your home directory, so you can navigate to your clone of  the Connector repository within the container prompt.</p>"},{"location":"installation/#tardis","title":"TARDIS","text":"<p>Standard installation of TARDIS can be accomplished using our locked environment file, with instructions here.  The release of TARDIS used as part of the Connector is XXXX.</p>"},{"location":"installation/#tardis-container","title":"TARDIS container","text":""},{"location":"installation/#build_2","title":"Build","text":"<p>We also provide a Docker definitions file to allow the production of a  containerized version of TARDIS using the version described above.  To build the container, install Docker  and run the command <code>sudo docker build -f /path/to/tardis.dockerfile -t tardis .</code>.</p>"},{"location":"installation/#run-with-docker_4","title":"Run with Docker","text":"<p>To run the built container with Docker to check it has built correctly,  run <code>sudo docker run -it tardis</code>. This will drop you into a bash prompt.  TARDIS is located in <code>/tardis-release-XXXX</code>. Run <code>exit</code> to end the container.</p> <p>To use the container to run the TARDIS step of the Connector with Docker, you will need to bind your copy of the Connector repository to the container. Run the command <code>sudo docker run -v /path/to/connector25:/connector25-it  tardis</code>.</p>"},{"location":"installation/#run-with-singularityapptainer_3","title":"Run with Singularity/Apptainer","text":"<p>To run the built container on an HPCC you will likely need to use  (Singularity)[https://docs.sylabs.io/guides/3.5/user-guide/introduction.html] or (Apptainer)[https://apptainer.org/docs/user/latest/] (these are basically the  same thing as of March 2025). </p> <p>Pull the container from DockerHub using the command  <code>singularity pull docker://CONNECTORUSERNAME/tardis-connector:XXXXXX</code>. Run the container using <code>singularity run tardis-connector-XXXXXX</code>. Singularity automatically mounts your home directory, so you can navigate to your clone of  the Connector repository within the container prompt.</p>"},{"location":"mesa_to_stir/","title":"MESA to STIR conversion","text":""},{"location":"mesa_to_stir/#inputs-to-mesa","title":"Inputs to MESA","text":"<p>MESA input consists of a <code>work</code> directory which includes project <code>inlists</code> (user configuration files), a <code>run_star_extras/</code> folder for custom Fortran functions that hook into the MESA stellar evolution solve, and make/run/restart bash scripts. To carry out a MESA simulation locally on your laptop, compile with <code>./mk</code> and run with <code>./rn</code>.</p>"},{"location":"mesa_to_stir/#outputs-from-mesa","title":"Outputs from MESA","text":"<p>MESA outputs include history and profile data (will appear in the <code>LOGS</code> directory in your <code>work</code> folder), photos for restarting the simulation, and images (optional). We include output files for our fiducial mesa methods. You should be able to reproduce this output by running the inlists as they appear in the inputs section. </p>"},{"location":"mesa_to_stir/#inputs-to-stir","title":"Inputs to STIR","text":"<p><code>STIR</code> takes as input a stellar model (density, temperature, radius, radial  velocity, ye, 1/Abar). <code>STIR</code> requires an input file <code>flash.par</code> which  configures, e.g., grid options such as radial extent and adaptive mesh  refinement levels and criteria. This is where the run base name (<code>basenm</code>),  model file, and output directory are set. To run <code>STIR</code>, navigate to  <code>obj_ccsn1dMLTnoHyb/run</code> and then <code>./stir -par_file inputs/stir.par</code>  (or, with MPI, e.g.m <code>mpirun -n 8 ./stir -par_file inputs/stir.par</code>).</p>"},{"location":"mesa_to_stir/#conversion-from-mesa-to-stir","title":"Conversion from MESA to STIR","text":"<p>To convert the MESA output to STIR input, we take a final MESA profile  at the onset of core-collapse (roughly 1000 km/s maximum infall) and  translate this into a form suitable for <code>STIR</code>. There is a script.... (#TODO)</p>"},{"location":"mesa_to_stir/#outputs-from-stir","title":"Outputs from STIR","text":"<p><code>STIR</code> outputs hydrodynamic and radiation radial profiles as a function of time in the <code>output</code> directory. These are HDF5 files. Quantities of interest might  include density, temperature, pressure, energies, ye, and velocity. <code>STIR</code> outputs integrated time series data in a <code>.dat</code> file prefixed with the  run <code>basenm</code> -- these are not in the <code>outputs</code> directory. The columns are  labeled and include quantities such as central density, diagnostic explosion  energy, mean shock radius, and mass accretion rate as a function of time. There is also a <code>.log</code> file which summarizes options for the current run.</p>"},{"location":"running_on_hpcc/","title":"Running the Connector on SLURM HPCC","text":"<p>Follow the instructions in the installation guide, checking that the containers run using the Singularity or Apptainer system on your HPCC. Make sure you login using X-Window forwarding (e.g., <code>ssh -X username@hpcc.example.com</code>).</p>"},{"location":"running_on_hpcc/#mesa","title":"MESA","text":"<p><code>salloc -n 16 -t 8:00:00 --x11</code> will request 16 CPUs for 8 hours including an X11 binding so you can inspect the simulation as it runs. Once your job launches, you can run the container. Once in the container, <code>cd</code> to  <code>connector25/mesa-connector/template_binary_dev</code>. Run <code>./mk</code> then <code>./rn</code>. You should see MESA begin to compute the evolution. The X-window based plots should also begin to display after some time.</p>"},{"location":"running_on_hpcc/#stir","title":"STIR","text":""},{"location":"running_on_hpcc/#mesa-stella","title":"MESA + STELLA","text":"<p><code>salloc -n 16 -t 8:00:00 --x11</code> will request 16 CPUs for 8 hours including an X11 binding so you can inspect the simulation as it runs. Once your job launches, you can run the container. Once in the container, <code>cd</code> to  <code>connector25/mesa-connector/stella</code>. Run XXX then XXX. You should see MESA begin to compute the evolution. The X-window based plots should also begin to display after some time.</p>"},{"location":"running_on_hpcc/#tardis","title":"TARDIS","text":"<p><code>salloc -n 32 -t 1:00:00</code> will request 32 CPUs for 1 hour. Once your job launches, you can run the container. Once in the container, <code>cd</code> to  <code>connector25/tardis-connector/</code>. Run <code>conda activate tardis</code> then <code>ipython tardis_run.py</code>. You should see a progress bar and text log output.</p>"},{"location":"snec_to_tardis/","title":"SNEC to TARDIS conversion","text":""},{"location":"snec_to_tardis/#outputs-from-snec","title":"Outputs from SNEC","text":""},{"location":"snec_to_tardis/#conversion-to-tardis","title":"Conversion to TARDIS","text":"<p>The SNEC output files XXXXX are ingested by the script XXXXXX.py and converted into the required TARDIS inputs, a configuration YAML file and a CSVY file that includes the 1D profiles.</p>"},{"location":"snec_to_tardis/#inputs-to-tardis","title":"Inputs to TARDIS","text":"<ul> <li>TARDIS configuration options: YAML file</li> <li>Density, velocity and composition profiles: CSVY file</li> <li>Atomic data: HDF file</li> </ul> <p>To modify TARDIS inputs, make changes to the variables located at the top of the file XXXXXX.py.</p>"},{"location":"stella_to_tardis/","title":"STELLA to TARDIS conversion","text":""},{"location":"stella_to_tardis/#outputs-from-stella","title":"Outputs from STELLA","text":""},{"location":"stella_to_tardis/#conversion-to-tardis","title":"Conversion to TARDIS","text":"<p>The STELLA output files XXXXX are ingested by the script XXXXXX.py and converted into the required TARDIS inputs, a configuration YAML file and a CSVY file that includes the 1D profiles.</p>"},{"location":"stella_to_tardis/#inputs-to-tardis","title":"Inputs to TARDIS","text":"<ul> <li>TARDIS configuration options: YAML file</li> <li>Density, velocity and composition profiles: CSVY file</li> <li>Atomic data: HDF file</li> </ul> <p>To modify TARDIS inputs, make changes to the variables located at the top of the file XXXXXX.py.</p>"},{"location":"stir_to_snec/","title":"STIR to SNEC conversion","text":""},{"location":"stir_to_snec/#inputs-to-stir","title":"Inputs to STIR","text":"<p><code>STIR</code> takes as input a stellar model (density, temperature, radius, radial  velocity, ye, 1/Abar). <code>STIR</code> requires an input file <code>flash.par</code> which  configures, e.g., grid options such as radial extent and adaptive mesh  refinement levels and criteria. This is where the run base name (<code>basenm</code>),  model file, and output directory are set. To run <code>STIR</code>, navigate to  <code>obj_ccsn1dMLTnoHyb/run</code> and then <code>./stir -par_file inputs/stir.par</code>  (or, with MPI, e.g.m <code>mpirun -n 8 ./stir -par_file inputs/stir.par</code>).</p>"},{"location":"stir_to_snec/#outputs-from-stir","title":"Outputs from STIR","text":"<p><code>STIR</code> outputs hydrodynamic and radiation radial profiles as a function of time in the <code>output</code> directory. These are HDF5 files. Quantities of interest might  include density, temperature, pressure, energies, ye, and velocity. <code>STIR</code> outputs integrated time series data in a <code>.dat</code> file prefixed with the  run <code>basenm</code> -- these are not in the <code>outputs</code> directory. The columns are  labeled and include quantities such as central density, diagnostic explosion  energy, mean shock radius, and mass accretion rate as a function of time. There is also a <code>.log</code> file which summarizes options for the current run.</p>"},{"location":"stir_to_snec/#inputs-to-snec","title":"Inputs to SNEC","text":""},{"location":"stir_to_stella/","title":"STIR to STELLA conversion","text":""},{"location":"stir_to_stella/#inputs-to-stir","title":"Inputs to STIR","text":""},{"location":"stir_to_stella/#outputs-from-stir","title":"Outputs from STIR","text":""},{"location":"stir_to_stella/#inputs-to-stella","title":"Inputs to STELLA","text":"<p>A simplified version of the STELLA code is packaged in MESA in <code>$MESA_DIR/stella/</code>. STELLA is a 1D multi-group (frequency-dependent) Radiation- Hydrodynamics code which is useful for modeling bolometric lightcurves and other observables for core-collapse supernovae.</p> <p>STELLA takes a <code>mesa.hyd</code> (contains hydrodynamic data) and <code>mesa.abd</code> (contains abundance data) file as input.</p> <p>To run STELLA, go to your STELLA folder <code>cd $MESA_DIR/stella</code> and make sure the input files (<code>mesa.hyd</code> and <code>mesa.abd</code>) are placed in <code>stella/modmake/</code>. From the stella directory, run just like in MESA, via the command <code>./rn</code></p>"},{"location":"stir_to_stella/#conversion-from-stir-to-stella","title":"Conversion from STIR to STELLA","text":"<p>To convert the STIR output to STELLA input, ...</p>"},{"location":"stir_to_stella/#outputs-from-stella","title":"Outputs from STELLA","text":"<p>Output is contained in <code>stella/res/</code>. This includes a <code>mesa.lbol</code> lightcurve file, among others.</p>"}]}